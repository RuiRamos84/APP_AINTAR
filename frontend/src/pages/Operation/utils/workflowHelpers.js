// frontend/src/pages/Operation/utils/workflowHelpers.js

/**
 * Obt√©m as transi√ß√µes v√°lidas para um documento baseado no step atual
 * @param {Object} document - Documento com informa√ß√£o do step atual (what)
 * @param {Object} metaData - Metadados incluindo step_transitions
 * @returns {Array} Transi√ß√µes v√°lidas para o step atual
 */
export const getValidTransitionsForCompletion = (document, metaData) => {
    console.log('üîç getValidTransitionsForCompletion - Input:', {
        document_pk: document?.pk,
        document_regnumber: document?.regnumber,
        current_step: document?.what,
        document_type: document?.tt_type,
        transitions_available: metaData?.step_transitions?.length || 0
    });

    if (!document || !metaData?.step_transitions) {
        console.warn('‚ùå Sem documento ou step_transitions no metaData');
        return [];
    }

    const currentStep = document.what;
    const documentType = document.tt_type;

    // üî• Converter currentStep para number para compara√ß√£o correta
    const currentStepNumber = Number(currentStep);

    // Encontrar o doctype_pk pelo tt_type do documento
    // IMPORTANTE: tt_type √© o PK do tipo de documento, n√£o o nome
    const documentTypePk = Number(documentType);

    console.log('üîÑ Filtros de workflow:', {
        currentStep,
        currentStepNumber,
        documentType,
        documentTypePk
    });

    if (!documentTypePk) {
        console.warn('‚ùå Tipo de documento n√£o encontrado');
        return [];
    }

    // Filtrar transi√ß√µes v√°lidas:
    // 1. Mesmo tipo de documento (doctype_pk)
    // 2. Partindo do step atual (from_step_pk)
    const validTransitions = metaData.step_transitions.filter(transition => {
        const matchType = transition.doctype_pk === documentTypePk;
        const matchStep = transition.from_step_pk === currentStepNumber;

        if (matchType && matchStep) {
            console.log('‚úÖ Transi√ß√£o v√°lida encontrada:', {
                transition_id: transition.pk,
                from_step: transition.from_step_pk,
                from_step_name: transition.from_step_name,
                to_step: transition.to_step_pk,
                to_step_name: transition.to_step_name,
                client: transition.client
            });
        }

        return matchType && matchStep;
    });

    console.log(`üìã Total de transi√ß√µes v√°lidas: ${validTransitions.length}`);
    return validTransitions;
};

/**
 * Determina o pr√≥ximo step baseado nas transi√ß√µes do workflow
 * Se h√° m√∫ltiplas op√ß√µes, retorna a primeira (pode ser refinado no futuro)
 * @param {Object} document - Documento atual
 * @param {Object} metaData - Metadados com step_transitions
 * @returns {Object|null} - { what: stepId, who: userId, to_step_name: string } ou null
 */
export const getNextStepFromWorkflow = (document, metaData) => {
    const validTransitions = getValidTransitionsForCompletion(document, metaData);

    if (validTransitions.length === 0) {
        console.warn('‚ö†Ô∏è Nenhuma transi√ß√£o v√°lida encontrada no workflow');
        return null;
    }

    // Se h√° m√∫ltiplas transi√ß√µes, log para informar
    if (validTransitions.length > 1) {
        console.warn('‚ö†Ô∏è M√∫ltiplas transi√ß√µes poss√≠veis:', validTransitions.map(t => ({
            to_step: t.to_step_pk,
            to_step_name: t.to_step_name,
            client: t.client
        })));
    }

    // Pegar a primeira transi√ß√£o v√°lida
    const selectedTransition = validTransitions[0];

    // Extrair o client (pode ser array ou valor √∫nico)
    let targetUser;
    if (Array.isArray(selectedTransition.client)) {
        targetUser = selectedTransition.client[0]; // Pegar o primeiro se for array
        console.log('‚ÑπÔ∏è Client √© array, usando o primeiro:', targetUser);
    } else {
        targetUser = selectedTransition.client;
    }

    const result = {
        what: String(selectedTransition.to_step_pk),
        who: String(targetUser),
        to_step_name: selectedTransition.to_step_name
    };

    console.log('‚úÖ Pr√≥ximo step determinado pelo workflow:', result);
    return result;
};

/**
 * Fallback para quando n√£o h√° workflow configurado
 * Retorna step 0 (conclu√≠do) com user padr√£o
 * @returns {Object} - { what: '0', who: '17' }
 */
export const getFallbackCompletionStep = () => {
    console.log('‚ö†Ô∏è Usando fallback - sem workflow configurado');
    return {
        what: '0',   // CONCLUIDO COM SUCESSO
        who: '17',   // User padr√£o
        to_step_name: 'CONCLUIDO COM SUCESSO'
    };
};

/**
 * Fun√ß√£o principal para determinar o pr√≥ximo step ao concluir uma opera√ß√£o
 * @param {Object} document - Documento atual
 * @param {Object} metaData - Metadados com step_transitions
 * @returns {Object} - { what: stepId, who: userId, to_step_name: string }
 */
export const getCompletionStep = (document, metaData) => {
    console.log('üéØ getCompletionStep - Iniciando determina√ß√£o do pr√≥ximo step');

    if (!document) {
        console.error('‚ùå Documento n√£o fornecido');
        return getFallbackCompletionStep();
    }

    // Tentar obter do workflow
    const workflowStep = getNextStepFromWorkflow(document, metaData);

    if (workflowStep) {
        return workflowStep;
    }

    // Fallback se n√£o h√° workflow
    console.warn('‚ö†Ô∏è Workflow n√£o dispon√≠vel, usando fallback');
    return getFallbackCompletionStep();
};
